<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CopySelectedContentsToNextFrameDescription" xml:space="preserve">
    <value>Place a copy of the selected strokes into the frame that comes next in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Copy Strokes To Next Frame button</comment>
  </data>
  <data name="CopySelectedContentsToNextFrameToolTip" xml:space="preserve">
    <value>Copy Strokes To Next Frame</value>
    <comment>The tooltip text for a button that triggers the CopySelectedContentsToNextFrameCommand</comment>
  </data>
  <data name="CopySelectedContentsToNextFrameUndoStateTitle" xml:space="preserve">
    <value>Copy Strokes To Next Frame</value>
    <comment>The title of the Undo Record created by the CopySelectedContentsToNextFrameCommand</comment>
  </data>
  <data name="CopySelectedContentsToNextLayerDescription" xml:space="preserve">
    <value>Place a copy of the selected strokes into the layer above the current one in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Copy Strokes To Next Layer button</comment>
  </data>
  <data name="CopySelectedContentsToNextLayerToolTip" xml:space="preserve">
    <value>Copy Strokes to the Layer Above</value>
    <comment>The tooltip text for a button that triggers the CopySelectedContentsToNextLayerCommand</comment>
  </data>
  <data name="CopySelectedContentsToNextLayerUndoStateTitle" xml:space="preserve">
    <value>Copy Strokes To Next Layer</value>
    <comment>The title of the Undo Record created by the CopySelectedContentsToNextLayerCommand</comment>
  </data>
  <data name="CopySelectedContentsToPreviousFrameDescription" xml:space="preserve">
    <value>Place a copy of the selected strokes into the frame that comes before the current one in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Copy Strokes To Previous Frame button</comment>
  </data>
  <data name="CopySelectedContentsToPreviousFrameToolTip" xml:space="preserve">
    <value>Copy Strokes To Previous Frame</value>
    <comment>The tooltip text for a button that triggers the CopySelectedContentsToPreviousFrameCommand</comment>
  </data>
  <data name="CopySelectedContentsToPreviousFrameUndoStateTitle" xml:space="preserve">
    <value>Copy Strokes To Previous Frame</value>
    <comment>The title of the Undo Record created by the CopySelectedContentsToPreviousFrameCommand</comment>
  </data>
  <data name="CopySelectedContentsToPreviousLayerDescription" xml:space="preserve">
    <value>Place a copy of the selected strokes into the layer below the current one in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Copy Strokes To Previous Layer button</comment>
  </data>
  <data name="CopySelectedContentsToPreviousLayerToolTip" xml:space="preserve">
    <value>Copy Strokes to the Layer Below</value>
    <comment>The tooltip text for a button that triggers the CopySelectedContentsToPreviousLayerCommand</comment>
  </data>
  <data name="CopySelectedContentsToPreviousLayerUndoStateTitle" xml:space="preserve">
    <value>Copy Strokes To Previous Layer</value>
    <comment>The title of the Undo Record created by the CopySelectedContentsToPreviousLayerCommand</comment>
  </data>
  <data name="CopySelectedStrokesToClipboardDescription" xml:space="preserve">
    <value>Copies the selected strokes into the clipboard</value>
    <comment>Status bar message that is displayed when the moust is over the Copy button</comment>
  </data>
  <data name="CopySelectedStrokesToClipboardToolTip" xml:space="preserve">
    <value>Copy Selected Strokes</value>
    <comment>The tooltip text for a button that triggers the CopySelectedStrokesToClipboardCommand</comment>
  </data>
  <data name="CutSelectedStrokesToClipboardDescription" xml:space="preserve">
    <value>Cuts the selected strokes into the clipboard</value>
    <comment>Status bar message that is displayed when the moust is over the Cut button</comment>
  </data>
  <data name="CutSelectedStrokesToClipboardToolTip" xml:space="preserve">
    <value>Cut Selected Strokes</value>
    <comment>The tooltip text for a button that triggers the CutSelectedStrokesToClipboardCommand</comment>
  </data>
  <data name="MainWindowViewModelDisplayName" xml:space="preserve">
    <value>Animation Editor</value>
    <comment>This gets assigned to the DisplayName property of the MainWindowViewModel class</comment>
  </data>
  <data name="MoveSelectedContentsToNextFrameDescription" xml:space="preserve">
    <value>Move the selected strokes into the frame that comes next in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Move Strokes to Next Frame button</comment>
  </data>
  <data name="MoveSelectedContentsToNextFrameToolTip" xml:space="preserve">
    <value>Move Strokes To Next Frame</value>
    <comment>The tooltip text for a button that triggers the MoveSelectedContentsToNextFrameCommand</comment>
  </data>
  <data name="MoveSelectedContentsToNextFrameUndoStateTitle" xml:space="preserve">
    <value>Move Strokes To Next Frame</value>
    <comment>The title of the Undo Record created by the MoveSelectedContentsToNextFrameCommand</comment>
  </data>
  <data name="MoveSelectedContentsToNextLayerDescription" xml:space="preserve">
    <value>Move the selected strokes into the layer above the current one in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Move Strokes To Next Layer button</comment>
  </data>
  <data name="MoveSelectedContentsToNextLayerToolTip" xml:space="preserve">
    <value>Move Strokes to the Layer Above</value>
    <comment>The tooltip text for a button that triggers the MoveSelectedContentsToNextLayerCommand</comment>
  </data>
  <data name="MoveSelectedContentsToNextLayerUndoStateTitle" xml:space="preserve">
    <value>Move Strokes To Next Layer</value>
    <comment>The title of the Undo Record created by the MoveSelectedContentsToNextLayerCommand</comment>
  </data>
  <data name="MoveSelectedContentsToPreviousFrameDescription" xml:space="preserve">
    <value>Move the selected strokes into the frame that comes before the current one in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Move Strokes To Previous Frame button</comment>
  </data>
  <data name="MoveSelectedContentsToPreviousFrameToolTip" xml:space="preserve">
    <value>Move Strokes To Previous Frame</value>
    <comment>The tooltip text for a button that triggers the MoveSelectedContentsToPreviousFrameCommand</comment>
  </data>
  <data name="MoveSelectedContentsToPreviousFrameUndoStateTitle" xml:space="preserve">
    <value>Move Strokes To Previous Frame</value>
    <comment>The title of the Undo Record created by the MoveSelectedContentsToPreviousFrameCommand</comment>
  </data>
  <data name="MoveSelectedContentsToPreviousLayerDescription" xml:space="preserve">
    <value>Move the selected strokes into the layer below the current one in the timeline</value>
    <comment>Status bar message that is displayed when the mouse is over the Move Strokes To Previous Layer button</comment>
  </data>
  <data name="MoveSelectedContentsToPreviousLayerToolTip" xml:space="preserve">
    <value>Move Strokes to the Layer Below</value>
    <comment>The tooltip text for a button that triggers the MoveSelectedContentsToPreviousLayerCommand</comment>
  </data>
  <data name="MoveSelectedContentsToPreviousLayerUndoStateTitle" xml:space="preserve">
    <value>Move Strokes To Previous Layer</value>
    <comment>The title of the Undo Record created by the MoveSelectedContentsToPreviousLayerCommand</comment>
  </data>
  <data name="OnionSkinSettingsViewModelDisplayName" xml:space="preserve">
    <value>Onionskin Settings</value>
    <comment>This gets assigned to the DisplayName property of the OnionSkinSettingsViewModel class</comment>
  </data>
  <data name="PasteStrokesFromClipboardDescription" xml:space="preserve">
    <value>Pastes the strokes from the clipboard into the current frame</value>
    <comment>Status bar message that is displayed when the mouse is over the Paste button</comment>
  </data>
  <data name="PasteStrokesFromClipboardToolTip" xml:space="preserve">
    <value>Paste Into Frame</value>
    <comment>The tooltip text for a button that triggers the PasteStrokesFromClipboardCommand</comment>
  </data>
  <data name="PasteStrokesFromClipboardUndoStateTitle" xml:space="preserve">
    <value>Paste Into Frame</value>
    <comment>The title of the Undo Record created by the PasteStrokesFromClipboardCommand</comment>
  </data>
</root>